import { consola as logger } from "consola";
import { promises as fs } from "fs";
import { glob } from "glob";
import path from "path";

import type { ModuleInfo } from "./types";

const CWD = process.cwd();
const COMMANDS_DIR = path.join(CWD, "commands");
const DISCRAFT_DIR = path.join(CWD, ".discraft");

function sanitizeName(name: string): string {
	return name.replace(/[^a-zA-Z0-9]/g, "");
}

async function findModules(extension: string): Promise<ModuleInfo[]> {
	try {
		const files = await glob(path.join(COMMANDS_DIR, `*.${extension}`));
		return files.map((filePath) => {
			const fileName = path.basename(filePath, `.${extension}`);
			const sanitizedName = sanitizeName(fileName);

			if (sanitizedName !== fileName) {
				logger.warn(
					`Filename "${fileName}" has invalid characters, using "${sanitizedName}" instead.`,
				);
			}
			return {
				name: sanitizedName,
				importPath: path
					.relative(
						path.dirname(
							path.join(DISCRAFT_DIR, "commands", `index.${extension}`),
						),
						filePath,
					)
					.replace(/\\/g, "/")
					.replace(new RegExp(`\\.${extension}$`), ""),
				isValid: true,
			};
		});
	} catch (err) {
		logger.error(`Error finding files in ${COMMANDS_DIR}.`, err);
		return [];
	}
}

async function generateVercelCommandsIndex(extension: "ts" | "js") {
	// Create the `.discraft/commands` directory if it doesn't exist
	await fs.mkdir(path.join(DISCRAFT_DIR, "commands"), { recursive: true });

	const OUTPUT_COMMANDS_FILE = path.join(
		DISCRAFT_DIR,
		"commands",
		`index.${extension}`,
	);

	const modules = await findModules(extension);
	if (!modules.length) {
		logger.warn("No command files found. Skipping command index generation.");
		const content = `
// This file is dynamically generated by Discraft
export default {};
`;
		await fs.writeFile(OUTPUT_COMMANDS_FILE, content);
		return;
	}

	let imports = "";
	let moduleList = "";
	for (const mod of modules) {
		imports += `import ${mod.name} from '${mod.importPath}';\n`;
		moduleList += `${mod.name}, `;
	}

	const content = `
// This file is dynamically generated by Discraft
${imports}

export default {
  ${moduleList.slice(0, -2)}
};
`;

	await fs.writeFile(OUTPUT_COMMANDS_FILE, content);
	logger.verbose("Vercel Command index file generated.");
}

export { generateVercelCommandsIndex };
